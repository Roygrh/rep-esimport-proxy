version: '0.2'
env:
  git-credential-helper: yes
  parameter-store:
    GITHUB_ACCOUNT: /elevensoftware/build/github_account
    GITHUB_PASSWORD: /elevensoftware/build/github_pass
    GITHUB_USER_NAME: /elevensoftware/build/github_user
    VERSION_HELPER: /elevensoftware/build/versionhelper
    SONAR_TOKEN: /elevensoftware/build/sonartoken
  shell: bash
phases:
  install:
    runtime-versions:
      dotnet: 8.0
    commands:
      - echo "Installing SonarScanner..."
      - dotnet tool install --global dotnet-sonarscanner
      - echo "Installing coverlet.console..."
      - dotnet tool install --global coverlet.console
      - dotnet tool install --global Amazon.Lambda.Tools
  pre_build: 
    commands:
      - | 
        echo '<?xml version="1.0" encoding="utf-8"?>
              <configuration>
                <packageSources>
                  <clear />
                  <add key="github" value="https://nuget.pkg.github.com/'$GITHUB_ACCOUNT'/index.json" />
                  <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
                </packageSources>
                <packageSourceCredentials>
                  <github>
                    <add key="Username" value="'$GITHUB_USER_NAME'" />
                    <add key="ClearTextPassword" value="'$GITHUB_PASSWORD'" />
                  </github>
                </packageSourceCredentials>
              </configuration>' > nuget.config
      - echo "Creating coverage.runsettings"
      - |
        echo '<RunSettings>
          <RunConfiguration>
            <ResultsDirectory>./coverage</ResultsDirectory>
          </RunConfiguration>
          <DataCollectionRunSettings>
            <DataCollectors>
              <DataCollector friendlyName="XPlat Code Coverage">
                <Configuration>
                  <Format>opencover</Format>
                  <CodeCoverage>
                    <ModulePaths>
                      <Exclude>
                        <ModulePath>.*Test.*</ModulePath>
                      </Exclude>
                    </ModulePaths>
                  </CodeCoverage>
                </Configuration>
              </DataCollector>
            </DataCollectors>
          </DataCollectionRunSettings>
        </RunSettings>' > coverage.runsettings
      - aws s3 cp $VERSION_HELPER versionhelper.sh; chmod +x versionhelper.sh; . ./versionhelper.sh #determine semver and create buildinfo.json
      
      - export specifier=$(case $qualifier in "build") echo "$VERSION-$qualifier.$CODEBUILD_BUILD_NUMBER" ;; "release") echo "$VERSION" ;; "*") echo "$VERSION-$qualifier" ;; esac)
      - export project=${PWD##*/}

      # echo project info
      - printf "%20s %-20s\n" \
        "" "" \
        "PROJECT INFO" "" \
        "-------------" "" \
        "Project:" "$project" \
        "Version:" "${VERSION}" \
        "Author:" "${CODEBUILD_GIT_AUTHOR}" \
        "Author Email:" "${CODEBUILD_GIT_AUTHOR_EMAIL}" \
        "Full Version:" "${ELEVEN_VERSION_FULL}" \
        "Build Version:" "${ELEVEN_VERSION_BUILD}" \
        "Alt Version:" "${ELEVEN_VERSION}" \
        "Tag:" "${CODEBUILD_GIT_TAG}" 

      # echo codebuild info
      - printf "%20s %-20s\n" \
        "" "" \
        "CODEBUILD INFO" "" \
        "-------------" "" \
        "GitHub Account:" "${GITHUB_ACCOUNT}" \
        "Branch:" "${CODEBUILD_GIT_BRANCH}" \
        "Commit:" "${CODEBUILD_GIT_COMMIT}" \
        "Source Version:" "${CODEBUILD_SOURCE_VERSION}" \
        "Webook Trigger:" "${CODEBUILD_WEBHOOK_TRIGGER}" \
        "Webook Base Ref:" "${CODEBUILD_WEBHOOK_BASE_REF}" \
        "Webook Head Ref:" "${CODEBUILD_WEBHOOK_HEAD_REF}" \
        "Eleven Account:" "${ELEVEN_BUILD_ACCOUNT}" \
        "Source Directory:" "${CODEBUILD_SRC_DIR}"
      
      # build sonar cloud analysis configuration
      - |-
          if [[ ${CODEBUILD_WEBHOOK_TRIGGER} == 'pr/'* ]] ; then
             export SQ_ANALYSIS_PARAMS="/d:sonar.pullrequest.key=${CODEBUILD_WEBHOOK_TRIGGER##*/} \
                                        /d:sonar.pullrequest.branch=${CODEBUILD_WEBHOOK_HEAD_REF##refs/heads/} \
                                        /d:sonar.pullrequest.base=${CODEBUILD_WEBHOOK_BASE_REF##refs/heads/}"
          else
             export SQ_ANALYSIS_PARAMS="/d:sonar.branch.name=$CODEBUILD_GIT_BRANCH"
          fi

      #inject version into cloudformation template (NOT NEEDED CURRENTLY)
      # - sed -i 's/VERSIONREPLACE/'$ELEVEN_VERSION_BUILD'/g' serverless.yml
  build:
    commands:
      - dotnet sonarscanner begin /o:$GITHUB_ACCOUNT /k:${GITHUB_ACCOUNT}_$project /d:sonar.host.url=https://sonarcloud.io  /d:sonar.login=$SONAR_TOKEN /d:sonar.cs.opencover.reportsPaths="${CODEBUILD_SRC_DIR}/coverage.opencover.xml" /d:sonar.coverage.exclusions="**Test*.cs" $SQ_ANALYSIS_PARAMS
      - echo "Starting build..."              
      - aws s3 cp $VERSION_HELPER versionhelper.sh; chmod +x versionhelper.sh; . ./versionhelper.sh 
      - sam build --template $TEMPLATE_PATH  
      - echo "Running unit tests..."
      - dotnet test --settings ./coverage.runsettings --collect:"XPlat Code Coverage"
      - cp $(find ${CODEBUILD_SRC_DIR}/coverage -name "coverage.opencover.xml") ${CODEBUILD_SRC_DIR}/coverage.opencover.xml
      - dotnet sonarscanner end /d:sonar.token=$SONAR_TOKEN
      - sam package --s3-bucket $ARTIFACT_BUCKET-us-east-1 --kms-key-id $KMS_KEY_ID_EAST_1 --region us-east-1 --s3-prefix SAM/$PROJECT/$ELEVEN_VERSION_FULL --output-template-file packaged_template-us-east-1.yml
      - sam package --s3-bucket $ARTIFACT_BUCKET-us-east-2 --kms-key-id $KMS_KEY_ID_EAST_2 --region us-east-2 --s3-prefix SAM/$PROJECT/$ELEVEN_VERSION_FULL --output-template-file packaged_template-us-east-2.yml
      - sam package --s3-bucket $ARTIFACT_BUCKET-us-west-2 --kms-key-id $KMS_KEY_ID_WEST_2 --region us-west-2 --s3-prefix SAM/$PROJECT/$ELEVEN_VERSION_FULL --output-template-file packaged_template-us-west-2.yml
      - sam package --s3-bucket $ARTIFACT_BUCKET-eu-west-1 --kms-key-id $KMS_KEY_ID_EU_WEST_1 --region eu-west-1 --s3-prefix SAM/$PROJECT/$ELEVEN_VERSION_FULL --output-template-file packaged_template-eu-west-1.yml
      - sam package --s3-bucket $ARTIFACT_BUCKET-eu-west-2 --kms-key-id $KMS_KEY_ID_EU_WEST_2 --region eu-west-2 --s3-prefix SAM/$PROJECT/$ELEVEN_VERSION_FULL --output-template-file packaged_template-eu-west-2.yml
      - sam package --s3-bucket $ARTIFACT_BUCKET-eu-central-1 --kms-key-id $KMS_KEY_ID_EU_CENTRAL_1 --region eu-central-1 --s3-prefix SAM/$PROJECT/$ELEVEN_VERSION_FULL --output-template-file packaged_template-eu-central-1.yml
  post_build:
    commands:    
artifacts: 
  files:
    - packaged_template*.yml 
    - buildinfo.json